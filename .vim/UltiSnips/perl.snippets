###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet ife "Conditional if..else (ife)"
if ($1) {
	${2:# body...}
} else {
	${3:# else...}
}

endsnippet

snippet ifee "Conditional if..elsif..else (ifee)"
if ($1) {
	${2:# body...}
} elsif ($3) {
	${4:# elsif...}
} else {
	${5:# else...}
}

endsnippet

snippet xunless "Conditional one-line (unless)"
${1:expression} unless ${2:condition};

endsnippet

snippet xif "Conditional one-line (xif)"
${1:expression} if ${2:condition};

endsnippet

snippet sub "Function (sub)"
sub ${1:function_name} {
	${2:# body...}
}

endsnippet

snippet xfore "Loop one-line (xforeach)"
${1:expression} foreach @${2:array};

endsnippet

snippet xwhile "Loop one-line (xwhile)"
${1:expression} while ${2:condition};

endsnippet

snippet test "Test"
#!/usr/bin/perl -w

use strict;
use Test::More tests => ${1:1};
use ${2:ModuleName};

ok(${3:assertion});

endsnippet

snippet class "class"
package ${1:ClassName};

${2:use base qw(${3:ParentClass});}${2/.+/\n\n/}sub new {
	my $class = shift;
	$class = ref $class if ref $class;
	my $self = bless {}, $class;
	$self;
}

1;

endsnippet

snippet eval "eval"
eval {
	${1:# do something risky...}
};
if ($@) {
	${2:# handle failure...}
}

endsnippet

snippet for "for"
for (my $${1:var} = 0; $$1 < ${2:expression}; $$1++) {
	${3:# body...}
}

endsnippet

snippet fore "foreach"
foreach ${1:my $${2:x}} (@${3:array}) {
	${4:# body...}
}

endsnippet

snippet if "if"
if ($1) {
	${2:# body...}
}

endsnippet

snippet slurp "slurp"
my $${1:var};
{ local $/ = undef; local *FILE; open FILE, "<${2:file}"; $$1 = <FILE>; close FILE }

endsnippet

snippet unless "unless"
unless ($1) {
	${2:# body...}
}

endsnippet

snippet while "while"
while ($1) {
	${2:# body...}
}

endsnippet

# vim:ft=snippets:
# #!/usr/bin/perl
snippet #!
	#!/usr/bin/perl
	
endsnippet
# Hash Pointer
snippet .
	 =>
endsnippet
# Function
snippet sub
	sub ${1:function_name} {
		${2:#body ...}
	}
endsnippet
# Conditional
snippet if
	if (${1}) {
		${2:# body...}
	}
endsnippet
# Conditional if..else
snippet ife
	if (${1}) {
		${2:# body...}
	} else {
		${3:# else...}
	}
endsnippet
# Conditional if..elsif..else
snippet ifee
	if (${1}) {
		${2:# body...}
	} elsif (${3}) {
		${4:# elsif...}
	} else {
		${5:# else...}
	}
endsnippet
# Conditional One-line
snippet xif
	${1:expression} if ${2:condition};${3}
endsnippet
# Unless conditional
snippet unless
	unless (${1}) {
		${2:# body...}
	}
endsnippet
# Unless conditional One-line
snippet xunless
	${1:expression} unless ${2:condition};${3}
endsnippet
# Try/Except
snippet eval
	eval {
		${1:# do something risky...}
	};
	if ($@) {
		${2:# handle failure...}
	}
endsnippet
# While Loop
snippet wh
	while (${1}) {
		${2:# body...}
	}
endsnippet
# While Loop One-line
snippet xwh
	${1:expression} while ${2:condition};${3}
endsnippet
# For Loop
snippet for
	for (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4:# body...}
	}
endsnippet
# Foreach Loop
snippet fore
	foreach my $${1:x} (@${2:array}) {
		${3:# body...}
	}
endsnippet
# Foreach Loop One-line
snippet xfore
	${1:expression} foreach @${2:array};${3}
endsnippet
# Package
snippet cl
	package ${1:ClassName};
	
	use base qw(${2:ParentClass});
	
	sub new {
		my $class = shift;
		$class = ref $class if ref $class;
		my $self = bless {}, $class;
		$self;
	}
	
	1;${3}
endsnippet
# Read File
snippet slurp
	my $${1:var};
	{ local $/ = undef; local *FILE; open FILE, "<${2:file}"; $$1 = <FILE>; close FILE }${3}
endsnippet

snippet dump
print("\\${1:var} = " . Dumper($1) . "\n");
endsnippet


snippet vim
# vim: tabstop=4 shiftwidth=4 noexpandtab ft=perl
endsnippet
# vim: tabstop=4 shiftwidth=4 noexpandtab
